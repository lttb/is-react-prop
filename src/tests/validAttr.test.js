import { expect } from 'chai'
import domElements from './domElements'
import { validAttr, createDomElem } from '../'

// thanks to styled-components for these tests

describe('validAttr', () => {
  console.log(domElements)
  domElements.forEach(createDomElem)

  it('should allow all the reactProps', () => {
    expect(validAttr('children')).to.equal(true)
    expect(validAttr('dangerouslySetInnerHTML')).to.equal(true)
    expect(validAttr('key')).to.equal(true)
    expect(validAttr('ref')).to.equal(true)
    expect(validAttr('autoFocus')).to.equal(true)
    expect(validAttr('defaultValue')).to.equal(true)
    expect(validAttr('valueLink')).to.equal(true)
    expect(validAttr('defaultChecked')).to.equal(true)
    expect(validAttr('checkedLink')).to.equal(true)
    expect(validAttr('innerHTML')).to.equal(true)
    expect(validAttr('suppressContentEditableWarning')).to.equal(true)
    expect(validAttr('onFocusIn')).to.equal(true)
    expect(validAttr('onFocusOut')).to.equal(true)
    expect(validAttr('className')).to.equal(true)
  })
  it('should allow all the html props', () => {
    expect(validAttr('accept')).to.equal(true)
    expect(validAttr('acceptCharset')).to.equal(true)
    expect(validAttr('accessKey')).to.equal(true)
    expect(validAttr('action')).to.equal(true)
    expect(validAttr('allowFullScreen')).to.equal(true)
    expect(validAttr('allowTransparency')).to.equal(true)
    expect(validAttr('alt')).to.equal(true)
    expect(validAttr('async')).to.equal(true)
    expect(validAttr('autoComplete')).to.equal(true)
    expect(validAttr('autoPlay')).to.equal(true)
    expect(validAttr('capture')).to.equal(true)
    expect(validAttr('cellPadding')).to.equal(true)
    expect(validAttr('cellSpacing')).to.equal(true)
    expect(validAttr('charSet')).to.equal(true)
    expect(validAttr('challenge')).to.equal(true)
    expect(validAttr('checked')).to.equal(true)
    expect(validAttr('cite')).to.equal(true)
    expect(validAttr('classID')).to.equal(true)
    expect(validAttr('className')).to.equal(true)
    expect(validAttr('cols')).to.equal(true)
    expect(validAttr('colSpan')).to.equal(true)
    expect(validAttr('content')).to.equal(true)
    expect(validAttr('contentEditable')).to.equal(true)
    expect(validAttr('contextMenu')).to.equal(true)
    expect(validAttr('controls')).to.equal(true)
    expect(validAttr('coords')).to.equal(true)
    expect(validAttr('crossOrigin')).to.equal(true)
    expect(validAttr('data')).to.equal(true)
    expect(validAttr('dateTime')).to.equal(true)
    expect(validAttr('default')).to.equal(true)
    expect(validAttr('defer')).to.equal(true)
    expect(validAttr('dir')).to.equal(true)
    expect(validAttr('disabled')).to.equal(true)
    expect(validAttr('download')).to.equal(true)
    expect(validAttr('draggable')).to.equal(true)
    expect(validAttr('encType')).to.equal(true)
    expect(validAttr('form')).to.equal(true)
    expect(validAttr('formAction')).to.equal(true)
    expect(validAttr('formEncType')).to.equal(true)
    expect(validAttr('formMethod')).to.equal(true)
    expect(validAttr('formNoValidate')).to.equal(true)
    expect(validAttr('formTarget')).to.equal(true)
    expect(validAttr('frameBorder')).to.equal(true)
    expect(validAttr('headers')).to.equal(true)
    expect(validAttr('height')).to.equal(true)
    expect(validAttr('hidden')).to.equal(true)
    expect(validAttr('high')).to.equal(true)
    expect(validAttr('href')).to.equal(true)
    expect(validAttr('hrefLang')).to.equal(true)
    expect(validAttr('htmlFor')).to.equal(true)
    expect(validAttr('httpEquiv')).to.equal(true)
    expect(validAttr('icon')).to.equal(true)
    expect(validAttr('id')).to.equal(true)
    expect(validAttr('inputMode')).to.equal(true)
    expect(validAttr('integrity')).to.equal(true)
    expect(validAttr('is')).to.equal(true)
    expect(validAttr('keyParams')).to.equal(true)
    expect(validAttr('keyType')).to.equal(true)
    expect(validAttr('kind')).to.equal(true)
    expect(validAttr('label')).to.equal(true)
    expect(validAttr('lang')).to.equal(true)
    expect(validAttr('list')).to.equal(true)
    expect(validAttr('loop')).to.equal(true)
    expect(validAttr('low')).to.equal(true)
    expect(validAttr('manifest')).to.equal(true)
    expect(validAttr('marginHeight')).to.equal(true)
    expect(validAttr('marginWidth')).to.equal(true)
    expect(validAttr('max')).to.equal(true)
    expect(validAttr('maxLength')).to.equal(true)
    expect(validAttr('media')).to.equal(true)
    expect(validAttr('mediaGroup')).to.equal(true)
    expect(validAttr('method')).to.equal(true)
    expect(validAttr('min')).to.equal(true)
    expect(validAttr('minLength')).to.equal(true)
    expect(validAttr('multiple')).to.equal(true)
    expect(validAttr('muted')).to.equal(true)
    expect(validAttr('name')).to.equal(true)
    expect(validAttr('nonce')).to.equal(true)
    expect(validAttr('noValidate')).to.equal(true)
    expect(validAttr('open')).to.equal(true)
    expect(validAttr('optimum')).to.equal(true)
    expect(validAttr('pattern')).to.equal(true)
    expect(validAttr('placeholder')).to.equal(true)
    expect(validAttr('poster')).to.equal(true)
    expect(validAttr('preload')).to.equal(true)
    expect(validAttr('profile')).to.equal(true)
    expect(validAttr('radioGroup')).to.equal(true)
    expect(validAttr('readOnly')).to.equal(true)
    expect(validAttr('referrerPolicy')).to.equal(true)
    expect(validAttr('rel')).to.equal(true)
    expect(validAttr('required')).to.equal(true)
    expect(validAttr('reversed')).to.equal(true)
    expect(validAttr('role')).to.equal(true)
    expect(validAttr('rows')).to.equal(true)
    expect(validAttr('rowSpan')).to.equal(true)
    expect(validAttr('sandbox')).to.equal(true)
    expect(validAttr('scope')).to.equal(true)
    expect(validAttr('scoped')).to.equal(true)
    expect(validAttr('scrolling')).to.equal(true)
    expect(validAttr('seamless')).to.equal(true)
    expect(validAttr('selected')).to.equal(true)
    expect(validAttr('shape')).to.equal(true)
    expect(validAttr('size')).to.equal(true)
    expect(validAttr('sizes')).to.equal(true)
    expect(validAttr('span')).to.equal(true)
    expect(validAttr('spellCheck')).to.equal(true)
    expect(validAttr('src')).to.equal(true)
    expect(validAttr('srcDoc')).to.equal(true)
    expect(validAttr('srcLang')).to.equal(true)
    expect(validAttr('srcSet')).to.equal(true)
    expect(validAttr('start')).to.equal(true)
    expect(validAttr('step')).to.equal(true)
    expect(validAttr('style')).to.equal(true)
    expect(validAttr('summary')).to.equal(true)
    expect(validAttr('tabIndex')).to.equal(true)
    expect(validAttr('target')).to.equal(true)
    expect(validAttr('title')).to.equal(true)
    expect(validAttr('type')).to.equal(true)
    expect(validAttr('useMap')).to.equal(true)
    expect(validAttr('value')).to.equal(true)
    expect(validAttr('width')).to.equal(true)
    expect(validAttr('wmode')).to.equal(true)
    expect(validAttr('wrap')).to.equal(true)
    expect(validAttr('about')).to.equal(true)
    expect(validAttr('datatype')).to.equal(true)
    expect(validAttr('inlist')).to.equal(true)
    expect(validAttr('prefix')).to.equal(true)
    expect(validAttr('property')).to.equal(true)
    expect(validAttr('resource')).to.equal(true)
    expect(validAttr('typeof')).to.equal(true)
    expect(validAttr('vocab')).to.equal(true)
    expect(validAttr('autoCapitalize')).to.equal(true)
    expect(validAttr('autoCorrect')).to.equal(true)
    expect(validAttr('autoSave')).to.equal(true)
    expect(validAttr('color')).to.equal(true)
    expect(validAttr('itemProp')).to.equal(true)
    expect(validAttr('itemScope')).to.equal(true)
    expect(validAttr('itemType')).to.equal(true)
    expect(validAttr('itemID')).to.equal(true)
    expect(validAttr('itemRef')).to.equal(true)
    expect(validAttr('results')).to.equal(true)
    expect(validAttr('security')).to.equal(true)
    expect(validAttr('unselectable')).to.equal(true)
  })
  it('should handle all the SVG props', () => {
    expect(validAttr('accentHeight')).to.equal(true)
    expect(validAttr('accumulate')).to.equal(true)
    expect(validAttr('additive')).to.equal(true)
    expect(validAttr('alignmentBaseline')).to.equal(true)
    expect(validAttr('allowReorder')).to.equal(true)
    expect(validAttr('alphabetic')).to.equal(true)
    expect(validAttr('amplitude')).to.equal(true)
    expect(validAttr('arabicForm')).to.equal(true)
    expect(validAttr('ascent')).to.equal(true)
    expect(validAttr('attributeName')).to.equal(true)
    expect(validAttr('attributeType')).to.equal(true)
    expect(validAttr('autoReverse')).to.equal(true)
    expect(validAttr('azimuth')).to.equal(true)
    expect(validAttr('baseFrequency')).to.equal(true)
    expect(validAttr('baseProfile')).to.equal(true)
    expect(validAttr('baselineShift')).to.equal(true)
    expect(validAttr('bbox')).to.equal(true)
    expect(validAttr('begin')).to.equal(true)
    expect(validAttr('bias')).to.equal(true)
    expect(validAttr('by')).to.equal(true)
    expect(validAttr('calcMode')).to.equal(true)
    expect(validAttr('capHeight')).to.equal(true)
    expect(validAttr('clip')).to.equal(true)
    expect(validAttr('clipPath')).to.equal(true)
    expect(validAttr('clipRule')).to.equal(true)
    expect(validAttr('clipPathUnits')).to.equal(true)
    expect(validAttr('colorInterpolation')).to.equal(true)
    expect(validAttr('colorInterpolationFilters')).to.equal(true)
    expect(validAttr('colorProfile')).to.equal(true)
    expect(validAttr('colorRendering')).to.equal(true)
    expect(validAttr('contentScriptType')).to.equal(true)
    expect(validAttr('contentStyleType')).to.equal(true)
    expect(validAttr('cursor')).to.equal(true)
    expect(validAttr('cx')).to.equal(true)
    expect(validAttr('cy')).to.equal(true)
    expect(validAttr('d')).to.equal(true)
    expect(validAttr('decelerate')).to.equal(true)
    expect(validAttr('descent')).to.equal(true)
    expect(validAttr('diffuseConstant')).to.equal(true)
    expect(validAttr('direction')).to.equal(true)
    expect(validAttr('display')).to.equal(true)
    expect(validAttr('divisor')).to.equal(true)
    expect(validAttr('dominantBaseline')).to.equal(true)
    expect(validAttr('dur')).to.equal(true)
    expect(validAttr('dx')).to.equal(true)
    expect(validAttr('dy')).to.equal(true)
    expect(validAttr('edgeMode')).to.equal(true)
    expect(validAttr('elevation')).to.equal(true)
    expect(validAttr('enableBackground')).to.equal(true)
    expect(validAttr('end')).to.equal(true)
    expect(validAttr('exponent')).to.equal(true)
    expect(validAttr('externalResourcesRequired')).to.equal(true)
    expect(validAttr('fill')).to.equal(true)
    expect(validAttr('fillOpacity')).to.equal(true)
    expect(validAttr('fillRule')).to.equal(true)
    expect(validAttr('filter')).to.equal(true)
    expect(validAttr('filterRes')).to.equal(true)
    expect(validAttr('filterUnits')).to.equal(true)
    expect(validAttr('floodColor')).to.equal(true)
    expect(validAttr('floodOpacity')).to.equal(true)
    expect(validAttr('focusable')).to.equal(true)
    expect(validAttr('fontFamily')).to.equal(true)
    expect(validAttr('fontSize')).to.equal(true)
    expect(validAttr('fontSizeAdjust')).to.equal(true)
    expect(validAttr('fontStretch')).to.equal(true)
    expect(validAttr('fontStyle')).to.equal(true)
    expect(validAttr('fontVariant')).to.equal(true)
    expect(validAttr('fontWeight')).to.equal(true)
    expect(validAttr('format')).to.equal(true)
    expect(validAttr('from')).to.equal(true)
    expect(validAttr('fx')).to.equal(true)
    expect(validAttr('fy')).to.equal(true)
    expect(validAttr('g1')).to.equal(true)
    expect(validAttr('g2')).to.equal(true)
    expect(validAttr('glyphName')).to.equal(true)
    expect(validAttr('glyphOrientationHorizontal')).to.equal(true)
    expect(validAttr('glyphOrientationVertical')).to.equal(true)
    expect(validAttr('glyphRef')).to.equal(true)
    expect(validAttr('gradientTransform')).to.equal(true)
    expect(validAttr('gradientUnits')).to.equal(true)
    expect(validAttr('hanging')).to.equal(true)
    expect(validAttr('horizAdvX')).to.equal(true)
    expect(validAttr('horizOriginX')).to.equal(true)
    expect(validAttr('ideographic')).to.equal(true)
    expect(validAttr('imageRendering')).to.equal(true)
    expect(validAttr('in')).to.equal(true)
    expect(validAttr('in2')).to.equal(true)
    expect(validAttr('intercept')).to.equal(true)
    expect(validAttr('k')).to.equal(true)
    expect(validAttr('k1')).to.equal(true)
    expect(validAttr('k2')).to.equal(true)
    expect(validAttr('k3')).to.equal(true)
    expect(validAttr('k4')).to.equal(true)
    expect(validAttr('kernelMatrix')).to.equal(true)
    expect(validAttr('kernelUnitLength')).to.equal(true)
    expect(validAttr('kerning')).to.equal(true)
    expect(validAttr('keyPoints')).to.equal(true)
    expect(validAttr('keySplines')).to.equal(true)
    expect(validAttr('keyTimes')).to.equal(true)
    expect(validAttr('lengthAdjust')).to.equal(true)
    expect(validAttr('letterSpacing')).to.equal(true)
    expect(validAttr('lightingColor')).to.equal(true)
    expect(validAttr('limitingConeAngle')).to.equal(true)
    expect(validAttr('local')).to.equal(true)
    expect(validAttr('markerEnd')).to.equal(true)
    expect(validAttr('markerMid')).to.equal(true)
    expect(validAttr('markerStart')).to.equal(true)
    expect(validAttr('markerHeight')).to.equal(true)
    expect(validAttr('markerUnits')).to.equal(true)
    expect(validAttr('markerWidth')).to.equal(true)
    expect(validAttr('mask')).to.equal(true)
    expect(validAttr('maskContentUnits')).to.equal(true)
    expect(validAttr('maskUnits')).to.equal(true)
    expect(validAttr('mathematical')).to.equal(true)
    expect(validAttr('mode')).to.equal(true)
    expect(validAttr('numOctaves')).to.equal(true)
    expect(validAttr('offset')).to.equal(true)
    expect(validAttr('opacity')).to.equal(true)
    expect(validAttr('operator')).to.equal(true)
    expect(validAttr('order')).to.equal(true)
    expect(validAttr('orient')).to.equal(true)
    expect(validAttr('orientation')).to.equal(true)
    expect(validAttr('origin')).to.equal(true)
    expect(validAttr('overflow')).to.equal(true)
    expect(validAttr('overlinePosition')).to.equal(true)
    expect(validAttr('overlineThickness')).to.equal(true)
    expect(validAttr('paintOrder')).to.equal(true)
    expect(validAttr('panose1')).to.equal(true)
    expect(validAttr('pathLength')).to.equal(true)
    expect(validAttr('patternContentUnits')).to.equal(true)
    expect(validAttr('patternTransform')).to.equal(true)
    expect(validAttr('patternUnits')).to.equal(true)
    expect(validAttr('pointerEvents')).to.equal(true)
    expect(validAttr('points')).to.equal(true)
    expect(validAttr('pointsAtX')).to.equal(true)
    expect(validAttr('pointsAtY')).to.equal(true)
    expect(validAttr('pointsAtZ')).to.equal(true)
    expect(validAttr('preserveAlpha')).to.equal(true)
    expect(validAttr('preserveAspectRatio')).to.equal(true)
    expect(validAttr('primitiveUnits')).to.equal(true)
    expect(validAttr('r')).to.equal(true)
    expect(validAttr('radius')).to.equal(true)
    expect(validAttr('refX')).to.equal(true)
    expect(validAttr('refY')).to.equal(true)
    expect(validAttr('renderingIntent')).to.equal(true)
    expect(validAttr('repeatCount')).to.equal(true)
    expect(validAttr('repeatDur')).to.equal(true)
    expect(validAttr('requiredExtensions')).to.equal(true)
    expect(validAttr('requiredFeatures')).to.equal(true)
    expect(validAttr('restart')).to.equal(true)
    expect(validAttr('result')).to.equal(true)
    expect(validAttr('rotate')).to.equal(true)
    expect(validAttr('rx')).to.equal(true)
    expect(validAttr('ry')).to.equal(true)
    expect(validAttr('scale')).to.equal(true)
    expect(validAttr('seed')).to.equal(true)
    expect(validAttr('shapeRendering')).to.equal(true)
    expect(validAttr('slope')).to.equal(true)
    expect(validAttr('spacing')).to.equal(true)
    expect(validAttr('specularConstant')).to.equal(true)
    expect(validAttr('specularExponent')).to.equal(true)
    expect(validAttr('speed')).to.equal(true)
    expect(validAttr('spreadMethod')).to.equal(true)
    expect(validAttr('startOffset')).to.equal(true)
    expect(validAttr('stdDeviation')).to.equal(true)
    expect(validAttr('stemh')).to.equal(true)
    expect(validAttr('stemv')).to.equal(true)
    expect(validAttr('stitchTiles')).to.equal(true)
    expect(validAttr('stopColor')).to.equal(true)
    expect(validAttr('stopOpacity')).to.equal(true)
    expect(validAttr('strikethroughPosition')).to.equal(true)
    expect(validAttr('strikethroughThickness')).to.equal(true)
    expect(validAttr('string')).to.equal(true)
    expect(validAttr('stroke')).to.equal(true)
    expect(validAttr('strokeDasharray')).to.equal(true)
    expect(validAttr('strokeDashoffset')).to.equal(true)
    expect(validAttr('strokeLinecap')).to.equal(true)
    expect(validAttr('strokeLinejoin')).to.equal(true)
    expect(validAttr('strokeMiterlimit')).to.equal(true)
    expect(validAttr('strokeOpacity')).to.equal(true)
    expect(validAttr('strokeWidth')).to.equal(true)
    expect(validAttr('surfaceScale')).to.equal(true)
    expect(validAttr('systemLanguage')).to.equal(true)
    expect(validAttr('tableValues')).to.equal(true)
    expect(validAttr('targetX')).to.equal(true)
    expect(validAttr('targetY')).to.equal(true)
    expect(validAttr('textAnchor')).to.equal(true)
    expect(validAttr('textDecoration')).to.equal(true)
    expect(validAttr('textRendering')).to.equal(true)
    expect(validAttr('textLength')).to.equal(true)
    expect(validAttr('to')).to.equal(true)
    expect(validAttr('transform')).to.equal(true)
    expect(validAttr('u1')).to.equal(true)
    expect(validAttr('u2')).to.equal(true)
    expect(validAttr('underlinePosition')).to.equal(true)
    expect(validAttr('underlineThickness')).to.equal(true)
    expect(validAttr('unicode')).to.equal(true)
    expect(validAttr('unicodeBidi')).to.equal(true)
    expect(validAttr('unicodeRange')).to.equal(true)
    expect(validAttr('unitsPerEm')).to.equal(true)
    expect(validAttr('vAlphabetic')).to.equal(true)
    expect(validAttr('vHanging')).to.equal(true)
    expect(validAttr('vIdeographic')).to.equal(true)
    expect(validAttr('vMathematical')).to.equal(true)
    expect(validAttr('values')).to.equal(true)
    expect(validAttr('vectorEffect')).to.equal(true)
    expect(validAttr('version')).to.equal(true)
    expect(validAttr('vertAdvY')).to.equal(true)
    expect(validAttr('vertOriginX')).to.equal(true)
    expect(validAttr('vertOriginY')).to.equal(true)
    expect(validAttr('viewBox')).to.equal(true)
    expect(validAttr('viewTarget')).to.equal(true)
    expect(validAttr('visibility')).to.equal(true)
    expect(validAttr('widths')).to.equal(true)
    expect(validAttr('wordSpacing')).to.equal(true)
    expect(validAttr('writingMode')).to.equal(true)
    expect(validAttr('x')).to.equal(true)
    expect(validAttr('xHeight')).to.equal(true)
    expect(validAttr('x1')).to.equal(true)
    expect(validAttr('x2')).to.equal(true)
    expect(validAttr('xChannelSelector')).to.equal(true)
    expect(validAttr('xlinkActuate')).to.equal(true)
    expect(validAttr('xlinkArcrole')).to.equal(true)
    expect(validAttr('xlinkHref')).to.equal(true)
    expect(validAttr('xlinkRole')).to.equal(true)
    expect(validAttr('xlinkShow')).to.equal(true)
    expect(validAttr('xlinkTitle')).to.equal(true)
    expect(validAttr('xlinkType')).to.equal(true)
    expect(validAttr('xmlBase')).to.equal(true)
    expect(validAttr('xmlns')).to.equal(true)
    expect(validAttr('xmlnsXlink')).to.equal(true)
    expect(validAttr('xmlLang')).to.equal(true)
    expect(validAttr('xmlSpace')).to.equal(true)
    expect(validAttr('y')).to.equal(true)
    expect(validAttr('y1')).to.equal(true)
    expect(validAttr('y2')).to.equal(true)
    expect(validAttr('yChannelSelector')).to.equal(true)
    expect(validAttr('z')).to.equal(true)
    expect(validAttr('zoomAndPan')).to.equal(true)
  })
  it('should handle aria and data attributes', () => {
    expect(validAttr('data-xyz')).to.equal(true)
    expect(validAttr('data-omg-this-works')).to.equal(true)
    expect(validAttr('aria-label')).to.equal(true)
    expect(validAttr('aria-labelled-by')).to.equal(true)
  })
  it('should handle uppercase aria and data attributes', () => {
    expect(validAttr('DATA-XYZ')).to.equal(true)
    expect(validAttr('DATA-OMG-THIS-WORKS')).to.equal(true)
    expect(validAttr('ARIA-LABEL')).to.equal(true)
    expect(validAttr('ARIA-LABELLED-BY')).to.equal(true)
  })
  it('should allow all the event handlers', () => {
    expect(validAttr('onCopy')).to.equal(true)
    expect(validAttr('onCopyCapture')).to.equal(true)
    expect(validAttr('onCut')).to.equal(true)
    expect(validAttr('onCutCapture')).to.equal(true)
    expect(validAttr('onPaste')).to.equal(true)
    expect(validAttr('onPasteCapture')).to.equal(true)
    expect(validAttr('onCompositionEnd')).to.equal(true)
    expect(validAttr('onCompositionEndCapture')).to.equal(true)
    expect(validAttr('onCompositionStart')).to.equal(true)
    expect(validAttr('onCompositionStartCapture')).to.equal(true)
    expect(validAttr('onCompositionUpdate')).to.equal(true)
    expect(validAttr('onCompositionUpdateCapture')).to.equal(true)
    expect(validAttr('onKeyDown')).to.equal(true)
    expect(validAttr('onKeyDownCapture')).to.equal(true)
    expect(validAttr('onKeyPress')).to.equal(true)
    expect(validAttr('onKeyPressCapture')).to.equal(true)
    expect(validAttr('onKeyUp')).to.equal(true)
    expect(validAttr('onKeyUpCapture')).to.equal(true)
    expect(validAttr('onFocus')).to.equal(true)
    expect(validAttr('onFocusCapture')).to.equal(true)
    expect(validAttr('onBlur')).to.equal(true)
    expect(validAttr('onBlurCapture')).to.equal(true)
    expect(validAttr('onChange')).to.equal(true)
    expect(validAttr('onChangeCapture')).to.equal(true)
    expect(validAttr('onInput')).to.equal(true)
    expect(validAttr('onInputCapture')).to.equal(true)
    expect(validAttr('onSubmit')).to.equal(true)
    expect(validAttr('onSubmitCapture')).to.equal(true)
    expect(validAttr('onClick')).to.equal(true)
    expect(validAttr('onClickCapture')).to.equal(true)
    expect(validAttr('onContextMenu')).to.equal(true)
    expect(validAttr('onContextMenuCapture')).to.equal(true)
    expect(validAttr('onDoubleClick')).to.equal(true)
    expect(validAttr('onDoubleClickCapture')).to.equal(true)
    expect(validAttr('onDrag')).to.equal(true)
    expect(validAttr('onDragCapture')).to.equal(true)
    expect(validAttr('onDragEnd')).to.equal(true)
    expect(validAttr('onDragEndCapture')).to.equal(true)
    expect(validAttr('onDragEnter')).to.equal(true)
    expect(validAttr('onDragEnterCapture')).to.equal(true)
    expect(validAttr('onDragExit')).to.equal(true)
    expect(validAttr('onDragExitCapture')).to.equal(true)
    expect(validAttr('onDragLeave')).to.equal(true)
    expect(validAttr('onDragLeaveCapture')).to.equal(true)
    expect(validAttr('onDragOver')).to.equal(true)
    expect(validAttr('onDragOverCapture')).to.equal(true)
    expect(validAttr('onDragStart')).to.equal(true)
    expect(validAttr('onDragStartCapture')).to.equal(true)
    expect(validAttr('onDrop')).to.equal(true)
    expect(validAttr('onDropCapture')).to.equal(true)
    expect(validAttr('onMouseDown')).to.equal(true)
    expect(validAttr('onMouseDownCapture')).to.equal(true)
    expect(validAttr('onMouseEnter')).to.equal(true)
    expect(validAttr('onMouseEnterCapture')).to.equal(true)
    expect(validAttr('onMouseLeave')).to.equal(true)
    expect(validAttr('onMouseLeaveCapture')).to.equal(true)
    expect(validAttr('onMouseMove')).to.equal(true)
    expect(validAttr('onMouseMoveCapture')).to.equal(true)
    expect(validAttr('onMouseOut')).to.equal(true)
    expect(validAttr('onMouseOutCapture')).to.equal(true)
    expect(validAttr('onMouseOver')).to.equal(true)
    expect(validAttr('onMouseOverCapture')).to.equal(true)
    expect(validAttr('onMouseUp')).to.equal(true)
    expect(validAttr('onMouseUpCapture')).to.equal(true)
    expect(validAttr('onSelect')).to.equal(true)
    expect(validAttr('onSelectCapture')).to.equal(true)
    expect(validAttr('onTouchCancel')).to.equal(true)
    expect(validAttr('onTouchCancelCapture')).to.equal(true)
    expect(validAttr('onTouchEnd')).to.equal(true)
    expect(validAttr('onTouchEndCapture')).to.equal(true)
    expect(validAttr('onTouchMove')).to.equal(true)
    expect(validAttr('onTouchMoveCapture')).to.equal(true)
    expect(validAttr('onTouchStart')).to.equal(true)
    expect(validAttr('onTouchStartCapture')).to.equal(true)
    expect(validAttr('onScroll')).to.equal(true)
    expect(validAttr('onScrollCapture')).to.equal(true)
    expect(validAttr('onWheel')).to.equal(true)
    expect(validAttr('onWheelCapture')).to.equal(true)
    expect(validAttr('onAbort')).to.equal(true)
    expect(validAttr('onAbortCapture')).to.equal(true)
    expect(validAttr('onCanPlay')).to.equal(true)
    expect(validAttr('onCanPlayCapture')).to.equal(true)
    expect(validAttr('onCanPlayThrough')).to.equal(true)
    expect(validAttr('onCanPlayThroughCapture')).to.equal(true)
    expect(validAttr('onDurationChange')).to.equal(true)
    expect(validAttr('onDurationChangeCapture')).to.equal(true)
    expect(validAttr('onEmptied')).to.equal(true)
    expect(validAttr('onEmptiedCapture')).to.equal(true)
    expect(validAttr('onEncrypted')).to.equal(true)
    expect(validAttr('onEncryptedCapture')).to.equal(true)
    expect(validAttr('onEnded')).to.equal(true)
    expect(validAttr('onEndedCapture')).to.equal(true)
    expect(validAttr('onError')).to.equal(true)
    expect(validAttr('onErrorCapture')).to.equal(true)
    expect(validAttr('onLoadedData')).to.equal(true)
    expect(validAttr('onLoadedDataCapture')).to.equal(true)
    expect(validAttr('onLoadedMetadata')).to.equal(true)
    expect(validAttr('onLoadedMetadataCapture')).to.equal(true)
    expect(validAttr('onLoadStart')).to.equal(true)
    expect(validAttr('onLoadStartCapture')).to.equal(true)
    expect(validAttr('onPause')).to.equal(true)
    expect(validAttr('onPauseCapture')).to.equal(true)
    expect(validAttr('onPlay')).to.equal(true)
    expect(validAttr('onPlayCapture')).to.equal(true)
    expect(validAttr('onPlaying')).to.equal(true)
    expect(validAttr('onPlayingCapture')).to.equal(true)
    expect(validAttr('onProgress')).to.equal(true)
    expect(validAttr('onProgressCapture')).to.equal(true)
    expect(validAttr('onRateChange')).to.equal(true)
    expect(validAttr('onRateChangeCapture')).to.equal(true)
    expect(validAttr('onSeeked')).to.equal(true)
    expect(validAttr('onSeekedCapture')).to.equal(true)
    expect(validAttr('onSeeking')).to.equal(true)
    expect(validAttr('onSeekingCapture')).to.equal(true)
    expect(validAttr('onStalled')).to.equal(true)
    expect(validAttr('onStalledCapture')).to.equal(true)
    expect(validAttr('onSuspend')).to.equal(true)
    expect(validAttr('onSuspendCapture')).to.equal(true)
    expect(validAttr('onTimeUpdate')).to.equal(true)
    expect(validAttr('onTimeUpdateCapture')).to.equal(true)
    expect(validAttr('onVolumeChange')).to.equal(true)
    expect(validAttr('onVolumeChangeCapture')).to.equal(true)
    expect(validAttr('onWaiting')).to.equal(true)
    expect(validAttr('onWaitingCapture')).to.equal(true)
    expect(validAttr('onLoad')).to.equal(true)
    expect(validAttr('onLoadCapture')).to.equal(true)
    expect(validAttr('onAnimationStart')).to.equal(true)
    expect(validAttr('onAnimationStartCapture')).to.equal(true)
    expect(validAttr('onAnimationEnd')).to.equal(true)
    expect(validAttr('onAnimationEndCapture')).to.equal(true)
    expect(validAttr('onAnimationIteration')).to.equal(true)
    expect(validAttr('onAnimationIterationCapture')).to.equal(true)
    expect(validAttr('onTransitionEnd')).to.equal(true)
    expect(validAttr('onTransitionEndCapture')).to.equal(true)
  })
})
